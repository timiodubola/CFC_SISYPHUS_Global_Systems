import * as THREE from '../libs/three/three.module.js';
import { OrbitControls } from '../libs/three/jsm/OrbitControls.js';
import { GLTFLoader } from '../libs/three/jsm/GLTFLoader.js';
import { Stats } from '../libs/stats.module.js';
import { ARButton } from '../libs/ARButton.js';
import {
	Constants as MotionControllerConstants,
	fetchProfile
} from '../libs/three/jsm/motion-controllers.module.js';

import { ControllerGestures } from '../libs/ControllerGestures.js';

const DEFAULT_PROFILES_PATH = 'https://cdn.jsdelivr.net/npm/@webxr-input-profiles/assets@1.0/dist/profiles';
const DEFAULT_PROFILE = 'generic-trigger';


class App{
	constructor(){
		const container = document.createElement( 'div' );
		document.body.appendChild( container );
        
        this.clock = new THREE.Clock();
        
		this.camera = new THREE.PerspectiveCamera( 70, window.innerWidth / window.innerHeight, 0.01, 20 );
		
		this.scene = new THREE.Scene();
        
		this.scene.add( new THREE.HemisphereLight( 0x606060, 0x404040 ) );

        const light = new THREE.DirectionalLight( 0xffffff );
        light.position.set( 1, 1, 1 ).normalize();
		this.scene.add( light );
			
		this.renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true } );
		this.renderer.setPixelRatio( window.devicePixelRatio );
		this.renderer.setSize( window.innerWidth, window.innerHeight );
        this.renderer.outputEncoding = THREE.sRGBEncoding;
        
		container.appendChild( this.renderer.domElement );
        
        this.controls = new OrbitControls( this.camera, this.renderer.domElement );
        this.controls.target.set(0, 3.5, 0);
        this.controls.update();
        
        this.stats = new Stats();
        document.body.appendChild( this.stats.dom );

        this.initScene();
        this.setupXR();
        
        window.addEventListener('resize', this.resize.bind(this) );
	}	
    
	makeAxisFromCylinders( axisL, tickL, tickS ){
		// Need to change colour to some form of  blue and also reduce height or lower it 
		// lets mimic the axis using a cylinder ????
		const axis_geometry = new THREE.CylinderGeometry( 0.005, 0.005, axisL, 32 );
		const tick_geometry = new THREE.CylinderGeometry( 0.005, 0.005, tickL, 32 );
		const long_tick_geometry = new THREE.CylinderGeometry( 0.005, 0.005, 3*tickL, 32 );

		const material = new THREE.MeshBasicMaterial( {color: 0x00000} );
		
		const axis_cylinder = new THREE.Mesh( axis_geometry, material );
			
		axis_cylinder.position.set( 0.70, 0.25, -2);
		//this.scene.add( this.axis_cylinder );

		// We will collect all axis tick components in this array 
		let axis_ticks = new THREE.Group();
		
		axis_ticks.add(axis_cylinder)

		let axy0 = axis_cylinder.position.y - axisL/2 ;
		let axyN = axis_cylinder.position.y + axisL/2 ;
		
		let nstep = -1;

		for (let axy = axy0 ; axy <= axyN ; axy += tickS)
		{
			
			nstep += 1;
			
			let tick = new THREE.Mesh( tick_geometry, material );

			tick.position.set(axis_cylinder.position.x - (tickL/2), axy, -2); 

			if(nstep % 4 == 0){
				
				tick = new THREE.Mesh( long_tick_geometry, material );

				tick.position.set(axis_cylinder.position.x - (3/2)*tickL, axy, -2); 
			} 

			tick.rotateZ(-Math.PI/2);
			
			axis_ticks.add(tick);
		}

		//this.scene.add( this.axis_ticks );

		return axis_ticks;
	}
    
	baseFloodElevationMsg(){
		
	   const h = 0.2;
	   const w = 0.2 * (6.65/0.86);
	   const geometry = new THREE.PlaneGeometry( w , h);  
	  
	   const texture = new THREE.TextureLoader().load( 'floodElev.png' );

	   const material = new THREE.MeshBasicMaterial( { map: texture } ); //, transparent: true, opacity: 0.4 } );

	   const elevMsg = new THREE.Mesh( geometry, material );

	   elevMsg.position.set( 0.75 - w/2 , 0.05, -2.5 );

	   return elevMsg ;
	}


	addOurScanner(){
	    const geometry = new THREE.PlaneGeometry( 0.5 * (8.8/2.8), 0.5);  
	  
		const texture = new THREE.TextureLoader().load( 'scanner.png' );

		const material = new THREE.MeshBasicMaterial( { map: texture, transparent: true, opacity: 0.3 } );

		const scanningPlane = new THREE.Mesh( geometry, material );

		scanningPlane.position.set(0, 0.5, -2.5);

		return scanningPlane;
	
	}
	
    addOurUIButtons(){
	  
	 // Fixing the Geomtery for the buttons
	 // const geometry = new THREE.CircleGeometry( 0.15, 32 );  

	  const geometry = new THREE.PlaneGeometry( 2.0 * (3.04/13.31), 2.0, 32 );  

	  // GIS map button
	  
	  
	  const gisT = new THREE.TextureLoader().load( 'allButtons.png' );

	  const gisM = new THREE.MeshBasicMaterial( { map: gisT, transparent: true, opacity: 0.4 } );

	  const buttons = new THREE.Mesh( geometry, gisM );

	  buttons.position.set(0.75, 1.15, -2.5);
	  
	  //this.gis_circle.position.set(0, 0, -0.3);

	  return buttons;

	}

    initScene(){
		
		// Add our logo
		const logT = new THREE.TextureLoader().load( 'sisyphus.jpg' );
		this.ourLogo = new THREE.Mesh(
            new THREE.PlaneGeometry( 0.4 , 0.4 ),
            new THREE.MeshBasicMaterial( { map: logT } )
        );
        this.ourLogo.position.set(-0.75, 2.0, -2.5);
		
		// Add our button panel
        this.buttonPanel = this.addOurUIButtons();
		
		this.scanningPlane = this.addOurScanner();
		this.scanningPlane.visible = false;
		
		this.axis = this.makeAxisFromCylinders( 2, 0.05, 0.1 );
		this.axis.visible = false;

		this.elevMsg = this.baseFloodElevationMsg();
		this.elevMsg.visible = false;
		
		// Add our Instructions
		const logI = new THREE.TextureLoader().load( 'instruct_home.png' );
		this.instruct = new THREE.Mesh(
            new THREE.PlaneGeometry( 1.5 , 0.75 ),
            new THREE.MeshBasicMaterial( { map: logI, transparent: true, opacity: 0.4 } )
        );
        this.instruct.position.set(-0.2, 1.3, -2.5);
		

		// Add our Flood Zone
		const logFZ = new THREE.TextureLoader().load( 'flood_zone.png' );
		this.floodZone = new THREE.Mesh(
            new THREE.PlaneGeometry( 1.5 , 0.5 ),
            new THREE.MeshBasicMaterial( { map: logFZ, transparent: true, opacity: 0.5 } )
        );
        this.floodZone.position.set(-0.2, 0.5, -2.5);
		this.floodZone.visible = false;

		this.scene.add(this.ourLogo, this.buttonPanel, this.scanningPlane, this.axis, this.elevMsg, this.instruct, this.floodZone);
	  		
		// Let's add the water mesh

        const geometry = new THREE.BoxBufferGeometry( 6, 1.9, 6 );  // Widht, Height, Depth
		const material = new THREE.MeshPhongMaterial( { color: 0x0127e4, transparent: true, opacity: 0.4} );
        
		this.mesh = new THREE.Mesh( geometry, material );
        this.mesh.position.set( 0, -1, -2)
		
		this.mesh.visible = false;

		this.scene.add( this.mesh );
		//this.camera.children(this.line);
    }
    
	setupXR(){
        this.renderer.xr.enabled = true; 
        
        const self = this;
        let controller, controller1;
        
       
		function onSessionStart(){
           // self.ui.mesh.position.set( 0, -0.15, -0.3 );
            //self.camera.add( self.ui.mesh );
        }
        
        function onSessionEnd(){
            //self.camera.remove( self.ui.mesh );
        }
        
        const btn = new ARButton( this.renderer, { onSessionStart, onSessionEnd });//, sessionInit: { optionalFeatures: [ 'dom-overlay' ], domOverlay: { root: document.body } } } );
        
        this.gestures = new ControllerGestures( this.renderer );
        this.gestures.addEventListener( 'tap', (ev)=>{
            //console.log( 'tap' ); 
            //self.ui.updateElement('info', 'tap' )
			
            if (!self.axis.visible){
                self.axis.visible = true;
				self.elevMsg.visible = true;
                self.mesh.visible = true;
				self.floodZone.visible = true;
            }
        });
        
	
        this.gestures.addEventListener( 'swipe', (ev)=>{
            //console.log( ev );   
            //self.ui.updateElement('info', `swipe ${ev.direction}` );

            if (self.axis.visible){
                self.axis.visible = false;
                self.elevMsg.visible = false;
				self.mesh.visible = false;
				self.floodZone.visible = false;
            }
        }); 
        
        
        this.renderer.setAnimationLoop( this.render.bind(this) );
	}

    resize(){
        this.camera.aspect = window.innerWidth / window.innerHeight;
        this.camera.updateProjectionMatrix();
        this.renderer.setSize( window.innerWidth, window.innerHeight );  
    }
    
	render( ) {   
        const dt = this.clock.getDelta();
        this.stats.update();
        if ( this.renderer.xr.isPresenting ){
            this.gestures.update();
            //this.ui.update();
        }
        //if ( this.knight !== undefined ) this.knight.update(dt);
        this.renderer.render( this.scene, this.camera );
    }
}

export { App };